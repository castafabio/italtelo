tr
  td.dropdown == render partial: 'line_items/actions', locals: {line_item: line_item}
  td = line_item.order_code
  td.text-center
    - if line_item.aggregated_job.present?
      = simple_format link_to line_item.aggregated_job, [line_item.aggregated_job]
    - else
      = boolean line_item.aggregated_job
  td = line_item.row_number
  - if line_item.aggregated_job.nil?
    - if line_item.customer_machine.present?
      td.text-center
        - if line_item.attached_file.attached?
          = link_to rails_blob_path(line_item&.attached_file, disposition: 'attachment'), class: :'btn btn-sm btn-info', title: t('obj.download', obj: "#{t('strings.Attached_file')}")
            = fa_icon('download')

          - if line_item.send_at.nil?
            =< link_to [:delete_attachment, line_item], class: :'btn btn-sm btn-danger', method: :delete, title: t('obj.delete', obj: LineItem.human_attribute_name(:attached_file).downcase), data: { confirm: t('confirm.delete_file'), spinner: true }
              = fa_icon('trash')
            =< link_to [:send_to_hotfolder, line_item], class: :'btn btn-sm btn-warning', data: { remote: true }, title: t('obj.send', obj: LineItem.human_attribute_name(:attached_file).downcase)
              = fa_icon('paper-plane')

        - else
          = link_to [:upload_file, line_item], class: :'upload_file btn btn-sm btn-warning', data: { remote: true }, title: t('obj.upload', obj: "#{t('strings.Attached_file')}")
            = fa_icon('upload')
    - else
      td.text-center = boolean line_item.attached_file.attached?
  - else
    - if line_item.attached_file.attached?
      td.text-center
        = link_to rails_blob_path(line_item&.attached_file, disposition: 'attachment'), class: :'btn btn-sm btn-info', title: t('obj.download', obj: "#{t('strings.Attached_file')}")
          = fa_icon('download')
    - else
      td.text-center = boolean line_item.attached_file.attached?
  td.text-center = l(line_item.send_at, format: :long) if line_item.send_at.present?
  td.text-center
    - if line_item.editable?
      = select_tag :customer_machine_id, options_for_select(CustomerMachine.ordered.collect {|p| [p.to_s, p.id]}, line_item.customer_machine.id), prompt: t('strings.Select_one'), class: :'inline_select customer_machine form-control', data: { id: line_item.id }
      p id="#{line_item.id}" = ""
    - else
      = line_item.customer_machine
  td = line_item.customer
  td = line_item.article_code
  td = line_item.article_description
  td = line_item.quantity
